//This algorithm works with a variation of insertion sort.
//By James Partsafas (40170301) and Christina Darstbanian (40097340)

Algorithm rearrangeParticipantsTailRecursive(pName, pDOB, n)
Input: String array pName with corresponding string array pDOB, both of length n
Output: return number of seniors (those 65 years old or more) while reordering array such
that seniors are listed chronologically at start and non-seniors are listed reverse-
chronologically immediately after them

//Get date (use current date)
int currentDate <- 20210521 //formatted yyyymmdd
int seniorAge <- 650000 //represents 65 years old in dating system used here.

//Special cases
if (pName.length != pDOB.length OR length = 0) then
	return 0
if (n = 1) then //Only one element in array to consider
	seniorCount <- 0
	for (i <- 0 to pName.length-1) do
		if (getAge(pDOB[i]) >= seniorAge) then
			increment seniorCount
		else
			break
		increment i
	return seniorCount

//General case
int tempIndex
int current
String tempString
int starting <- pName.length - n
int tempAge
boolean leftIsSenior <- false
boolean rightIsSenior <- true

tempIndex <- starting
current <- getAge(pDOB[starting])

//Check if first person is senior
if (current >= seniorAge) then
	leftIsSenior <- true

//Left person is non-senior
if (!leftIsSenior) then
	for (j <- starting + 1 to pName.length - 1 do
		tempAge <- getAge(pDOB[j])
		if (tempAge >= seniorAge) then
			//Swap positions when senior is found
			tempString <- pName[starting]
			pName[starting] <- pName[j]
			pName[j] <- tempString
			tempString <- pDOB[starting]
			pDOB[starting] <- pDOB[j]
			pDOB[j] <- tempString
	
			leftIsSenior <- true
			current <- tempAge
		
			break
		increment j


//Senior is in starting position
if (leftIsSenior) then
	for (j <- starting + 1 to pName.length - 1 do
		rightIsSenior <- false
		tempAge <- getAge(pDOB[j])
		if (tempAge >= seniorAge) then
			rightIsSenior <- true
		if (tempAge > current AND rightIsSenior) then
			tempIndex <- j
			current <- tempAge
		
		increment j

//Only juniors are in the list
if (leftIsSenior) then
	for (j <- starting + 1 to pName.length - 1 do
		rightIsSenior <- false
		tempAge <- getAge(pDOB[j])
		if (tempAge >= seniorAge) then
			rightIsSenior <- true
		if (tempAge < current AND !rightIsSenior) then
			tempIndex <- j
			current <- tempAge
		
		increment j

//Swap positions
if (tempIndex != starting) then
	tempString <- pName[starting]
	pName[starting] <- pName[tempIndex]
	pName[tempIndex] <- tempString
	tempString <- pDOB[starting]
	pDOB[starting] <- pDOB[tempIndex]
	pDOB[tempIndex] <- tempString

//Recursive call
return rearrangeParticipantsTailRecursive(pName, pDOB, n-1)



************************************************************************************


Algorithm getAge(dob)
Input: String dob representing date of birth, formatted as day-month-year (strings are understood as an array of chars)
Output: An integer representing age. 

String[3] stringDate
int word <- 0
int letter <- 0
//Get day, month, and year in array of strings
for (i <- 0 to dob.length - 1) do
	if (dob[i] = '-') then
		increment word
		letter <- 0
	else
		stringDate[word][letter] <- dob[i]
	increment i

//Verify that day and month are not single digit and add 0 at start if that's the case
if (stringDate[0].length = 1) then
	stringDate[0] <- '0' + stringDate[0]
if (stringDate[1].length = 1) then
	stringDate[1] <- '0' + stringDate[1]

string fullDate <- stringDate[2] + stringDate[1] + stringDate[0]

//Convert this string to an integer
int date <- 0
int temp
int power <- 1
for (i <- fullDate.length - 1 to 0) do
	temp <- (int) fullDate[i]
	for (j <- 0 to power - 1) do
		temp = temp * 10
		increment j
	date = date + temp
	increment power
	decrement i

int currentDate <- 20210521 //formatted yyyymmdd

date <- currentDate - date

return date